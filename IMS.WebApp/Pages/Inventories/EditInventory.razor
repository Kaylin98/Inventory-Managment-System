@page "/editinventory/{InvId:int}"
@using IMS.CoreBusiness;
@using IMS.UseCases.Inventories;
@inject IEditInventoryUseCase IEditInventoryUseCase
@inject IGetInventoryByIdUseCase GetInventoryByIdUseCase
@inject NavigationManager NavigationManager;

<h3>Edit Inventory</h3>
<br />

<EditForm Model="inventory" OnValidSubmit="Edit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
        @bind-Value="inventory.Name"
                   class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
        @bind-Value="inventory.Quantity"
                     class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
        @bind-Value="inventory.Price"
                     class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-danger" @onclick="GoBack">Cancel</button>

</EditForm>


@code {
    [Parameter]
    public int InvId { get; set; }
    private Inventory inventory = new Inventory();

    protected async override Task OnParametersSetAsync()
    {
        this.inventory = await GetInventoryByIdUseCase.ExecuteAsync(InvId);
    }

    public async Task Edit()
    {
        await IEditInventoryUseCase.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
